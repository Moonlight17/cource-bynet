apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: {{ .Values.deployment.namespace }}-bynet-app
  labels:
    app: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - image: {{ .Values.deployment.registryBackend }}{{ .Values.deployment.backTag }}
          imagePullPolicy: Always
          name: backend
          resources:
            limits:
              cpu: 1000m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
          livenessProbe:
            httpGet:
              path: /
              port: 8000
            initialDelaySeconds: 10
            timeoutSeconds: 10
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: backend-secret
                  key: postgres-user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: backend-secret
                  key: postgres-password
            - name: REMOTE_USER
              valueFrom:
                secretKeyRef:
                  name: backend-secret
                  key: remote-user
            - name: REMOTE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: backend-secret
                  key: remote-password
            - name: DATABASE_HOST
              valueFrom:
                configMapKeyRef:
                  name: backend-configmap
                  key: database_url
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: backend-configmap
                  key: POSTGRES_DB
            - name: DATABASE_PORT
              valueFrom:
                configMapKeyRef:
                  name: backend-configmap
                  key: DATABASE_PORT
            - name: BACKEND_PORT
              valueFrom:
                configMapKeyRef:
                  name: backend-configmap
                  key: BACKEND_PORT
            - name: REMOTE_HOST
              valueFrom:
                configMapKeyRef:
                  name: backend-configmap
                  key: REMOTE_HOST
            - name: REMOTE_PORT
              valueFrom:
                configMapKeyRef:
                  name: backend-configmap
                  key: REMOTE_PORT
            - name: REMOTE_FOLDER
              valueFrom:
                configMapKeyRef:
                  name: backend-configmap
                  key: REMOTE_FOLDER
            - name: POSTGRES_NAME
              valueFrom:
                configMapKeyRef:
                  name: backend-configmap
                  key: POSTGRES_NAME
          ports:
            - name: project-port
              protocol: TCP
              containerPort: 8000
      nodeSelector:
        environment: {{ .Values.deployment.namespace }}
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: {{ .Values.deployment.namespace }}-bynet-app
  labels:
    app: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - image: {{ .Values.deployment.registryFrontend }}{{ .Values.deployment.frontTag }}
          imagePullPolicy: Always
          name: frontend
          resources:
            requests:
              memory: "50Mi"
              cpu: "10m"
            limits:
              memory: "100Mi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 10
            timeoutSeconds: 10
          env:
            - name: BACKEND_PORT
              valueFrom:
                configMapKeyRef:
                  name: backend-configmap
                  key: BACKEND_PORT
            - name: BACKEND_URL
              valueFrom:
                configMapKeyRef:
                  name: backend-configmap
                  key: backend_url
          ports:
            - name: project-port
              protocol: TCP
              containerPort: 80
      nodeSelector:
        environment: {{ .Values.deployment.namespace }}
---

# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: database-deployment
#   namespace: {{ .Values.deployment.namespace }}-bynet-app
#   labels:
#     app: database
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: database
#   template:
#     metadata:
#       labels:
#         app: database
#     spec:
#       containers:
#         - image: postgres:14-alpine
#           name: database
#           resources:
#             requests:
#               memory: "1536Mi"
#               cpu: "10m"
#             limits:
#               memory: "4096Mi"
#               cpu: "500m"
#           env:
#             - name: POSTGRES_USER
#               valueFrom:
#                 secretKeyRef:
#                   name: backend-secret
#                   key: postgres-user
#             - name: POSTGRES_PASSWORD
#               valueFrom:
#                 secretKeyRef:
#                   name: backend-secret
#                   key: postgres-password
#             - name: POSTGRES_DB
#               valueFrom:
#                 configMapKeyRef:
#                   name: backend-configmap
#                   key: POSTGRES_DB
#           ports:
#             - name: project-port
#               protocol: TCP
#               containerPort: 5432
# ---

# apiVersion: autoscaling/v1
# kind: HorizontalPodAutoscaler
# metadata:
#   name: hpa-diploma-app
#   namespace: default
# spec:
#   scaleTargetRef:
#     apiVersion: apps/v1
#     kind: Deployment
#     name: diploma-app
#   minReplicas: 1
#   maxReplicas: 10
#   targetCPUUtilizationPercentage: 30
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: lb-django
#   annotations:
#     service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "240"
# spec:
#   type: LoadBalancer
#   selector:
#     app: django
#     name: django
#   ports:
#     - port: 8080
#       targetPort: 8000
