pipeline {
    agent any

    // parameters {
    //     string(name: 'environment', defaultValue: 'default', description: 'Workspace/environment file to use for deployment')
    //     string(name: 'version', defaultValue: '', description: 'Version variable to pass to Terraform')
    //     booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
    // }
    
    environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        POSTGRES_USER         = credentials('postgresUser') 
        POSTGRES_PASSWORD     = credentials('postgresPassword') 
        REMOTE_USER           = credentials('remoteUser') 
        REMOTE_PASSWORD       = credentials('remotePassword') 
        TF_IN_AUTOMATION      = '1'
        PATH_INFRASTRUCTURE   = "./FinalProject/Terraform/"
        PATH_APP              = "./FinalProject/Kubernetes/"
        tag                   = "${env.BRANCH_NAME == "develop" ? "staging" : "prod"}"
    }

    stages {
        stage('Cloning Git') {
            steps {
                git (
                    branch: env.BRANCH_NAME,
                    url: 'https://github.com/Moonlight17/cource-bynet.git'
                )
            }
        }
        stage('VPC') {
            steps {
                sh 'sed -i \'/profile = var.profile/d\' ${PATH_INFRASTRUCTURE}VPC/main.tf'
                sh 'terraform -chdir=${PATH_INFRASTRUCTURE}VPC/ init'
                sh 'terraform -chdir=${PATH_INFRASTRUCTURE}VPC/ plan -input=false -out tfplan_VPC'
                sh 'terraform -chdir=${PATH_INFRASTRUCTURE}VPC/ show -no-color tfplan_VPC > tfplan_VPC.txt'
                sh 'terraform -chdir=${PATH_INFRASTRUCTURE}VPC/ apply -input=false tfplan_VPC'
            }
        }
        stage('RDS') {
            steps {
                sh 'sed -i \'/profile = var.profile/d\' ${PATH_INFRASTRUCTURE}RDS/main.tf'
                sh 'terraform -chdir=${PATH_INFRASTRUCTURE}RDS/ init'
                sh 'terraform -chdir=${PATH_INFRASTRUCTURE}RDS/ plan -input=false -out tfplan_RDS'
                sh 'terraform -chdir=${PATH_INFRASTRUCTURE}RDS/ show -no-color tfplan_RDS > tfplan_RDS.txt'
                sh 'terraform -chdir=${PATH_INFRASTRUCTURE}RDS/ apply -input=false tfplan_RDS'
            }
        }
        stage('EKS') {
            steps {
                sh 'sed -i \'/profile = var.profile/d\' ${PATH_INFRASTRUCTURE}EKS/main.tf'
                sh 'terraform -chdir=${PATH_INFRASTRUCTURE}EKS/ init'
                sh 'terraform -chdir=${PATH_INFRASTRUCTURE}EKS/ plan -input=false -out tfplan_EKS'
                sh 'terraform -chdir=${PATH_INFRASTRUCTURE}EKS/ show -no-color tfplan_EKS > tfplan_EKS.txt'
                sh 'terraform -chdir=${PATH_INFRASTRUCTURE}EKS/ apply -input=false tfplan_EKS'
            }
        }
        stage('KUBER') {
            steps {
                sh '''
                    touch ${PATH_APP}/eksconfig
                    echo "\nterraform output"
                    kubeconfig=`terraform -chdir=${PATH_INFRASTRUCTURE}EKS/ output -raw kubeconfig`
                    
                    echo "\nexport KuberConfig"
                    export KUBECONFIG=${kubeconfig}


                    kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.6.1/components.yaml

                    rdsendpoint=`terraform -chdir=${PATH_INFRASTRUCTURE}RDS/ output -raw rds_endpoint` 


                    sed -i 's/__RDS_ENDPOINT__/${rdsendpoint}/g' ${PATH_APP}helm-app/${tag}.values.yaml
                    sed -i 's/__POSTGRES_USER__/${postgresUser}/g' ${PATH_APP}helm-app/${tag}.values.yaml
                    sed -i 's/__POSTGRES_PASSWORD__/${postgresPassword}/g' ${PATH_APP}helm-app/${tag}.values.yaml
                    sed -i 's/__REMOTE_USER__/${remoteUser}/g' ${PATH_APP}helm-app/${tag}.values.yaml
                    sed -i 's/__REMOTE_PASSWORD__/${remotePassword}/g' ${PATH_APP}helm-app/${tag}.values.yaml



                    echo "\n\n\n\n helm install ${tag}-diploma-app ${PATH_APP}helm-app/ --values ${PATH_APP}helm-app/${tag}.values.yaml"
                    helm install ${tag}-diploma-app ${PATH_APP}helm-app/ --values ${PATH_APP}helm-app/${tag}.values.yaml
                '''
                
            }
        }
    }
}
