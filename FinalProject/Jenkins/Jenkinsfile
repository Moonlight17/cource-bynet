pipeline {
    environment {
        registry_front = "moonlight234/bynet_attendance_front"
        registry_back = "moonlight234/bynet_attendance_back"
        path_dockerfile_front = "./FinalProject/front_aggregate"
        path_dockerfile_back = "./FinalProject/djangoProject"
        registryCredential = 'Docker'
        tag = "${env.BRANCH_NAME == "develop" ? ":dev-latest" : ":latest"}"
        type_build = "${env.BRANCH_NAME == "develop" ? "staging" : "production"}"
        // dockerImage = ''
    }
    agent any
    stages {
        stage('Cloning Git') {
            steps {
                
                git (
                    branch: env.BRANCH_NAME,
                    url: 'https://github.com/Moonlight17/cource-bynet.git'
                )
            }
        }
        stage('Building image Front') {
            steps{
                script {
                    sh '''
                        sed -i "s/__TYPE_BUILD__/${type_build}/g" ${path_dockerfile_front}/src/components/navigbar.vue
                    '''
                    frontImage = docker.build(registry_front + tag,
                    "-f ${path_dockerfile_front}/Dockerfile  ${path_dockerfile_front}"
                    )
                }
            }
        }
        stage('Building image Back') {
            steps{
                script {
                    backImage = docker.build(registry_back + tag,
                    "-f ${path_dockerfile_back}/Dockerfile  ${path_dockerfile_back}"
                    )
                }
            }
        }
        stage('SonarQube Analysis') {
            when {
                branch 'develop'
            }
            environment {
                SCANNER_HOME = tool 'Sonar'
                PROJECT_NAME = "BynetBootcamp"
                PATH_TO_PROJECT = "./FinalProject"
            }
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner \
                    -Dsonar.java.binaries=build/classes/java/ \
                    -Dsonar.projectKey=$PROJECT_NAME \
                    -Dsonar.sources=$PATH_TO_PROJECT \
                    -Dsonar.coverage.exclusions=$PATH_TO_PROJECT \
                    -Dsonar.projectVersion=$BUILD_NUMBER''' 
                }
            }
        }
        stage('Deploy Image') {
            steps{
                script {
                    docker.withRegistry( '', registryCredential ) {
                        frontImage.push();
                        backImage.push()
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                sh 'ls'
            }
            echo 'One way or another, I have finished'
            deleteDir() /* clean up our workspace */
        }
        success {
            // echo 'I succeeded!'
            script {
                mess = "âœ…âœ…âœ… #${env.JOB_NAME}  \n\n Branch ${env.BRANCH_NAME}  *Successfully* builded \n\n It was build number (${env.BUILD_NUMBER}) \n\n ${tag} \n\n Backend Image: https://hub.docker.com/repository/docker/moonlight234/bynet_attendance_back \n Frontend: https://hub.docker.com/repository/docker/moonlight234/bynet_attendance_front"
            }
                telegramSend(message: "${mess}", chatId: -1001840248324)
        }
        unstable {
            script {
                mess = "ðŸŸ¡ðŸŸ¡ðŸŸ¡ #${env.JOB_NAME} Build \n\n **UNSTABLE** \n\n ${env.BUILD_NUMBER}"
            }
            telegramSend(message: "${mess}", chatId: -1001840248324)
        }
        failure {
            // echo 'I succeeded!'
            script {
                mess = "ðŸš¨ðŸš¨ðŸš¨ #${env.JOB_NAME} Build with \n\n *ERROR* \n\n ${env.BUILD_NUMBER}, @Moonlight1790"
            }
            telegramSend(message: "${mess}", chatId: -1001840248324)
        }
        changed {
            echo 'Things were different before...'
        }
    }
}
