pipeline {
    environment {
        registry_front = "moonlight234/bynet_attendance_front"
        registry_back = "moonlight234/bynet_attendance_back"
        path_dockerfile_front = "./FinalProject/front_aggregate"
        path_dockerfile_back = "./FinalProject/djangoProject"
        registryCredential = 'Docker'
        tag = "${env.BRANCH_NAME == "develop" ? ":dev-latest" : ":latest"}"
        // dockerImage = ''
    }
    agent any
    stages {
        stage('Cloning Git') {
            steps {
                
                git (
                    // branch: 'develop',
                    url: 'https://github.com/Moonlight17/cource-bynet.git'
                )
            }
        }
        stage('Building image Front') {
            steps{
                script {
                    frontImage = docker.build(registry_front + tag,
                    "-f ${path_dockerfile_front}/Dockerfile  ${path_dockerfile_front}"
                    )
                }
            }
        }
        stage('Building image Back') {
            steps{
                script {
                    backImage = docker.build(registry_back + tag,
                    "-f ${path_dockerfile_back}/Dockerfile  ${path_dockerfile_back}"
                    )
                }
            }
        }
        stage('SonarQube Analysis') {
            when {
                branch 'develop'
            }
            environment {
                SCANNER_HOME = tool 'Sonar'
                PROJECT_NAME = "BynetBootcamp"
                PATH_TO_PROJECT = "./FinalProject"
            }
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner \
                    -Dsonar.java.binaries=build/classes/java/ \
                    -Dsonar.projectKey=$PROJECT_NAME \
                    -Dsonar.sources=$PATH_TO_PROJECT ''' 
                }
            }
        }
        stage('Deploy Image') {
            steps{
                script {
                    // echo registry_front:tag
                    // echo registry_back:tag
                    ls
                    echo './FinalProject/djangoProject/aggregated/urls.py'
                    docker.withRegistry( '', registryCredential ) {
                        frontImage.push();
                        backImage.push()
                    }
                }
            }
        }
    }
}
